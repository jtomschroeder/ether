
extern crate ether;

use ether::packet::datalink::ethernet;
use ether::packet::network::{ipv4, icmp};
use ether::tap;

// #[cfg_attr(rustfmt, rustfmt_skip)]
fn main() {
    println!("HELLO!");

    // 0x0000:  4500 003c 3aff 0000 8001 5c55 c0a8 9216  E..<:.....\U....
    // 0x0010:  c0a8 9005 0800 4d35 0001 0026 6162 6364  ......M5...&abcd
    // 0x0020:  6566 6768 696a 6b6c 6d6e 6f70 7172 7374  efghijklmnopqrst
    // 0x0030:  7576 7761 6263 6465 6667 6869            uvwabcdefghi

    // let ip = [0x45, 0x00, 0x00, 0x3c, 0x3a, 0xff, 0x00, 0x00, 0x80, 0x01, 0x5c, 0x55,
    //           0xc0, 0xa8, 0x92, 0x16, // 192.168.146.22
    //           0xc0, 0xa8, 0x90, 0x05  // 192.168.144.5
    //          ];

    // let ip = [0x45, 0x00, 0x00, 0x3c, 0x3a, 0xff, 0x00, 0x00, 0x80, 0x01, 0x5c, 0x55,
    //           0x0A, 0x00, 0x00, 0xDD, // 10.0.0.221 (en0)
    //           0xAD, 0xC2, 0x4A, 0x71, // 173.194.74.113 (google.com)
    //
    //           // IP payload (ICMP)
    //           0x08, 0x00, 0x4d, 0x35, 0x00, 0x01, 0x00, 0x26, 0x61, 0x62, 0x63, 0x64, 0x65,
    //           0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72,
    //           0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69
    //          ];

    let packet = [0x4a, 0x1d, 0x70, 0x19, 0x45, 0xef, 0x78, 0x4f, 0x43, 0x52, 0x57, 0x5f, 0x08,
                  0x00, 0x45, 0x00, 0x00, 0x54, 0xdf, 0x03, 0x00, 0x00, 0x40, 0x01, 0xdd, 0xe1,
                  0x0a, 0x00, 0x00, 0xdd, 0xac, 0xd9, 0x06, 0x0e, 0x08, 0x00, 0x05, 0xcd, 0xee,
                  0x61, 0x00, 0x00, 0x58, 0x83, 0xe1, 0x82, 0x00, 0x0e, 0xde, 0xb9, 0x08, 0x09,
                  0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
                  0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,
                  0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
                  0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37];

    let ethernet = ethernet::Frame::new(&packet);
    // println!("ETH: {:#?}", ethernet);

    // let ip = ipv4::Packet::new(&ip);
    // println!("IP: {:#?}", ip);

    // let icmp = icmp::Packet::new(&ip.payload());
    // println!("ICMP: {:#?}", icmp);

    let mut tap = tap::Tap::new("en0").unwrap();

    let mut sink = tap.sink();
    sink.send(&packet).unwrap();
}
